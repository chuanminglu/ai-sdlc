name: 需求变更邮件通知

# 触发条件：当Issue被创建、编辑、标签变更或重新打开时
on:
  issues:
    types: [opened, edited, labeled, unlabeled, reopened]

permissions:
  contents: read    # 用于读取仓库内容
  issues: write     # 用于创建和评论Issue
  pull-requests: read # 用于读取仓库元数据
  repository-projects: write # 用于管理项目

# GitHub Secrets 配置说明：
# 1. EMAIL_USERNAME: 你的QQ邮箱地址（52148@qq.com）
# 2. EMAIL_PASSWORD: 你的QQ邮箱授权码，不是QQ密码
#    获取QQ邮箱授权码步骤：
#    - 登录QQ邮箱网页版
#    - 点击"设置" -> "账户"
#    - 找到"POP3/SMTP服务"并开启
#    - 按提示生成授权码并保存

jobs:
  notify-requirement-change:
    runs-on: ubuntu-latest
    
    # 仅当Issue包含"requirement"或"feature"标签时运行
    if: contains(github.event.issue.labels.*.name, 'requirement') || contains(github.event.issue.labels.*.name, 'feature')
    
    steps:
      # 步骤1: 发送邮件通知
      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.qq.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          to: 52148@qq.com
          from: GitHub Actions <${{ secrets.EMAIL_USERNAME }}>
          subject: 🔔 需求变更通知：${{ github.event.issue.title }}
          html_body: |
            <h2>需求变更通知</h2>
            <p><strong>状态：</strong> 
            ${{ github.event.action == 'opened' && '新增需求' ||
                github.event.action == 'edited' && '需求已编辑' ||
                github.event.action == 'labeled' && '需求新增标签' ||
                github.event.action == 'unlabeled' && '需求移除标签' ||
                github.event.action == 'reopened' && '需求重新打开' ||
                '需求已更新' }}
            </p>
            <p><strong>标题：</strong> ${{ github.event.issue.title }}</p>
            <p><strong>编号：</strong> #${{ github.event.issue.number }}</p>
            <p><strong>提交者：</strong> ${{ github.event.issue.user.login }}</p>
            <p><strong>标签：</strong> ${{ join(github.event.issue.labels.*.name, ', ') }}</p>
            <h3>需求描述：</h3>
            <pre>
            ${{ github.event.issue.body }}
            </pre>
            <p><a href="${{ github.event.issue.html_url }}">查看详情</a></p>
      
      # 步骤2: 更新项目看板（使用新版 GitHub Projects API）
      - name: Update project board
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}  # 使用具有更高权限的个人访问令牌
          script: |
            async function run() {
              try {
                // 查询组织的项目列表
                const findProject = await github.graphql(`
                  query($owner: String!) {
                    organization(login: $owner) {
                      projectsV2(first: 20) {
                        nodes {
                          id
                          title
                          number
                        }
                      }
                    }
                  }
                `, {
                  owner: context.repo.owner
                });

                let projectId = null;
                const projects = findProject.organization?.projectsV2.nodes || [];
                const existingProject = projects.find(p => p.title === '需求管理');

                if (existingProject) {
                  projectId = existingProject.id;
                } else {
                  // 创建新项目
                  const newProject = await github.graphql(`
                    mutation($input: CreateProjectV2Input!) {
                      createProjectV2(input: $input) {
                        projectV2 {
                          id
                        }
                      }
                    }
                  `, {
                    input: {
                      ownerId: context.repo.owner,
                      title: '需求管理'
                    }
                  });
                  projectId = newProject.createProjectV2.projectV2.id;

                  // 设置项目字段（可选）
                  // 这里可以添加自定义字段，如状态、优先级等
                }

                // 将Issue添加到项目
                await github.graphql(`
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemById(input: {
                      projectId: $projectId
                      contentId: $contentId
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `, {
                  projectId: projectId,
                  contentId: github.context.payload.issue.node_id
                });

                // 添加成功评论
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `✅ 此需求已被添加到新版项目看板。\n\n当前处理状态：\n- [x] 发送邮件通知\n- [x] 添加到项目看板\n- [x] 设置评审状态`
                });
              } catch (error) {
                console.error('操作失败:', error);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `❌ 处理此需求时发生错误: ${error.message}\n\n请确保:\n1. 已正确设置GH_PAT密钥\n2. PAT具有适当的权限（管理项目和Issue权限）`
                });
                throw error;
              }
            }

            // 执行主函数
            await run();
