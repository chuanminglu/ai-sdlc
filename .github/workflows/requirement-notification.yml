name: 需求变更邮件通知  

# 触发条件：当Issue被创建、编辑、标签变更或重新打开时
on:
  issues:
    types: [opened, edited, labeled, unlabeled, reopened]

# GitHub Secrets 配置说明：
# 1. EMAIL_USERNAME: 你的QQ邮箱地址（52148@qq.com）
# 2. EMAIL_PASSWORD: 你的QQ邮箱授权码，不是QQ密码
#    获取QQ邮箱授权码步骤：
#    - 登录QQ邮箱网页版
#    - 点击"设置" -> "账户"
#    - 找到"POP3/SMTP服务"并开启
#    - 按提示生成授权码并保存

jobs:  
  notify-requirement-change:  
    runs-on: ubuntu-latest  
    
    # 仅当Issue包含"requirement"或"feature"标签时运行  
    if: contains(github.event.issue.labels.*.name, 'requirement') || contains(github.event.issue.labels.*.name, 'feature')
    
    steps:  
      # 步骤1: 检出代码仓库  
      - name: Checkout code  
        uses: actions/checkout@v3  
      
      # 步骤2: 获取Issue详细信息  
      - name: Get issue details  
        id: issue-info  
        run: |  
          echo "ISSUE_TITLE=${{ github.event.issue.title }}" >> $GITHUB_ENV  
          echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV  
          echo "ISSUE_URL=${{ github.event.issue.html_url }}" >> $GITHUB_ENV  
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV  
          echo "${{ github.event.issue.body }}" >> $GITHUB_ENV  
          echo "EOF" >> $GITHUB_ENV  
          echo "ISSUE_AUTHOR=${{ github.event.issue.user.login }}" >> $GITHUB_ENV  
          echo "EVENT_TYPE=${{ github.event.action }}" >> $GITHUB_ENV  
      
      # 步骤3: 发送邮件通知      - name: Send email notification  
        uses: dawidd6/action-send-mail@v3  
        with:  
          server_address: smtp.qq.com  
          server_port: 465
          secure: true  # 启用SSL加密
          username: ${{ secrets.EMAIL_USERNAME }}  
          password: ${{ secrets.EMAIL_PASSWORD }}  # 使用QQ邮箱授权码
          subject: "🔔 需求变更通知: ${{ env.ISSUE_TITLE }} (#${{ env.ISSUE_NUMBER }})"
          html_body: |
            <h2>需求变更通知</h2>
            
            <p><strong>状态:</strong> 
            ${{ env.EVENT_TYPE == 'opened' && '新增需求' ||
                env.EVENT_TYPE == 'edited' && '需求已编辑' ||
                env.EVENT_TYPE == 'labeled' && '需求新增标签' ||
                env.EVENT_TYPE == 'unlabeled' && '需求移除标签' ||
                env.EVENT_TYPE == 'reopened' && '需求重新打开' ||
                '需求已更新' }}
            </p>
            
            <p><strong>标题:</strong> ${{ env.ISSUE_TITLE }}</p>
            <p><strong>编号:</strong> #${{ env.ISSUE_NUMBER }}</p>
            <p><strong>提交者:</strong> ${{ env.ISSUE_AUTHOR }}</p>
            <p><strong>标签:</strong> ${{ join(github.event.issue.labels.*.name, ', ') }}</p>
            
            <h3>需求描述:</h3>
            <pre>
            ${{ env.ISSUE_BODY }}
            </pre>
            
            <p><a href="${{ env.ISSUE_URL }}">查看详情</a></p>          to: 52148@qq.com  
          from: GitHub Actions <${{ secrets.EMAIL_USERNAME }}>  
          
      # 步骤4: 更新项目看板
      - name: Update project board
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 获取项目ID (使用GraphQL API)
            const projectQuery = `
              query {
                repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                  projectsV2(first: 1) {
                    nodes {
                      id
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            try {
              const projectData = await github.graphql(projectQuery);
              const project = projectData.repository.projectsV2.nodes[0];
              
              if (!project) {
                console.log('未找到项目看板，可能需要先创建项目');
                return;
              }
              
              // 查找状态字段
              const statusField = project.fields.nodes.find(field => 
                field.name.toLowerCase() === "status" || field.name === "状态"
              );
              
              if (!statusField) {
                console.log('未找到状态字段，将仅添加到项目而不设置状态');
                return;
              }
              
              // 查找"需求评审"选项
              const reviewOption = statusField.options.find(option => 
                option.name === "需求评审"
              );
              
              // 将Issue添加到项目
              const addToProjectMutation = `
                mutation {
                  addProjectV2ItemById(input: {
                    projectId: "${project.id}"
                    contentId: "${context.payload.issue.node_id}"
                  }) {
                    item {
                      id
                    }
                  }
                }
              `;
              
              const result = await github.graphql(addToProjectMutation);
              const itemId = result.addProjectV2ItemById.item.id;
              
              // 设置状态为"需求评审"
              if (reviewOption) {
                const updateFieldMutation = `
                  mutation {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: "${project.id}"
                      itemId: "${itemId}"
                      fieldId: "${statusField.id}"
                      value: { 
                        singleSelectOptionId: "${reviewOption.id}"
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;
                
                await github.graphql(updateFieldMutation);
              }
              
              // 添加评论
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `✅ 此需求已被添加到项目看板并标记为"需求评审"状态。\n\n当前处理状态：\n- [x] 发送邮件通知\n- [x] 添加到项目看板\n- [x] 设置评审状态`
              });
              
            } catch (error) {
              console.log(`更新项目看板失败: ${error.message}`);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ 尝试添加此需求到项目看板时发生错误: ${error.message}`
              });
            }
